imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }
    - { resource: sonata/media.yml }
    - { resource: sonata/sonata_classification.yml }
    - { resource: "@MainBundle/Resources/config/services.yml" }
    - { resource: "@AboutBundle/Resources/config/services.yml" }
    - { resource: "@ContactsBundle/Resources/config/services.yml" }
    - { resource: "@AccountBundle/Resources/config/services.yml" }
    - { resource: "@CooperationBundle/Resources/config/services.yml" }
    - { resource: "@DiplomasBundle/Resources/config/services.yml" }
    - { resource: "@WhyChooseBundle/Resources/config/services.yml" }
    - { resource: "@FaqBundle/Resources/config/services.yml" }

# Put parameters here that don't need to change on each machine where the app is deployed
# http://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
#parameters:
#    locale: en

framework:
    #esi:             ~
    translator:      { fallbacks: ["%locale%"] }
    secret:          "%secret%"
    router:
        resource: "%kernel.root_dir%/config/routing.yml"
        strict_requirements: ~
    form:            ~
    csrf_protection: ~
    validation:      { enable_annotations: true }
    #serializer:      { enable_annotations: true }
    templating:
        engines: ['twig']
        #assets_version: SomeVersionScheme
    default_locale:  "%locale%"
    trusted_hosts:   ~
    trusted_proxies: ~
    session:
        # handler_id set to null will use default session handler from php.ini
        handler_id:  ~
    fragments:       ~
    http_method_override: true

# Twig Configuration
twig:
    debug:            "%kernel.debug%"
    strict_variables: "%kernel.debug%"
    globals:
        aio_get: "@aio_core.service"
    form:
        resources:
#            - 'SonataMediaBundle:Form:media_widgets.html.twig'
            - 'ApplicationSonataMediaBundle:Form:media_widgets.html.twig'

# Assetic Configuration
assetic:
    debug:          "%kernel.debug%"
    use_controller: false
    bundles:        []
    #java: /usr/bin/java
    filters:
        cssrewrite: ~

# Doctrine Configuration
doctrine:
    dbal:
        driver:   pdo_mysql
        host:     "%database_host%"
        port:     "%database_port%"
        dbname:   "%database_name%"
        user:     "%database_user%"
        password: "%database_password%"
        charset:  UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.root_dir%/data/data.db3"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #     path:     "%database_path%"
        types:
            json: Sonata\Doctrine\Types\JsonType
        mapping_types:
            enum: string
        options:
            1002: set names 'utf8'

    orm:
        auto_generate_proxy_classes: "%kernel.debug%"
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true
        mappings:
            ApplicationSonataUserBundle: ~
            SonataUserBundle: ~
# Swiftmailer Configuration
swiftmailer:
    transport: "%mailer_transport%"
    host:      "%mailer_host%"
    username:  "%mailer_user%"
    password:  "%mailer_password%"
    spool:     { type: memory }

sonata_block:
    default_contexts: [AiO]
    blocks:
        sonata.admin.block.admin_list:
            contexts:   [admin]

        #sonata.admin_doctrine_orm.block.audit:
        #    contexts:   [admin]

        sonata.block.service.text:
        sonata.block.service.rss:

        # Some specific block from the SonataMediaBundle
        sonata.media.block.media:
        #sonata.media.block.gallery:
        #sonata.media.block.feature_media:
        sonata.user.block.menu:    # used to display the menu in profile pages
        sonata.user.block.account: # used to display menu option (login option)
        sonata.admin.block.search_result:
            contexts: [admin]

fos_user:
    db_driver:      orm # can be orm or odm
    firewall_name:  secured_area
    user_class:     Application\Sonata\UserBundle\Entity\User


    group:
        group_class:   Application\Sonata\UserBundle\Entity\Group
        group_manager: sonata.user.orm.group_manager

    service:
        user_manager: sonata.user.orm.user_manager

    registration:
        form:
            type: sonata_user_registration
        confirmation:
            enabled:    true
            from_email:
                address:        aio.group.test@gmail.com
                sender_name:    AiO GROUP

sonata_user:
    profile:
        menu:
            - { route: 'sonata_user_profile_show', label: 'sonata_profile_title', domain: 'ApplicationSonataUserBundle'}
            - { route: 'sonata_user_profile_edit', label: 'link_edit_profile', domain: 'ApplicationSonataUserBundle'}
            - { route: 'sonata_user_change_password', label: 'Изменить пароль', domain: 'ApplicationSonataUserBundle'}
            - { route: 'sonata_user_profile_edit_authentication', label: 'title_user_edit_authentication', domain: 'SonataUserBundle'}

#    admin:
#        user:
#            class:      Application\Sonata\UserBundle\Admin\Model\UserAdmin

    admin:                  # Admin Classes
        user:
            class:          Application\Sonata\UserBundle\Admin\Model\UserAdmin
            controller:     ApplicationSonataUserBundle:UserAdmin
            translation:    SonataUserBundle

        group:
            class:          Application\Sonata\UserBundle\Admin\Model\GroupAdmin
            controller:     ApplicationSonataUserBundle:Group
            translation:    SonataUserBundle


sonata_admin:
    security:
        handler: sonata.admin.security.handler.role
        information:
              ADMIN: [ LIST, CREATE, VIEW]
    title: AiO
    title_logo: /apple-touch-icon.png
    templates:
        # other configuration options
#        layout:  SonataAdminBundle::layout.html.twig
        search:              SonataAdminBundle:Core:search.html.twig
        search_result_block: SonataAdminBundle:Block:block_search_result.html.twig

a2lix_translation_form:
    locales: [ky, ru]
    required_locales: [ky, ru]
    manager_registry: doctrine
    templating: "A2lixTranslationFormBundle::default.html.twig"


ivory_ck_editor:
    default_config: cke_config
    configs:
        cke_config:
            filebrowserBrowseRoute: admin_sonata_media_media_browser
            filebrowserImageBrowseRoute: admin_sonata_media_media_browser
            # Display images by default when clicking the image dialog browse button
            filebrowserImageBrowseRouteParameters:
                provider: sonata.media.provider.image
            filebrowserUploadRoute: admin_sonata_media_media_upload
            filebrowserUploadRouteParameters:
                provider: sonata.media.provider.file
            # Upload file as image when sending a file from the image dialog
            filebrowserImageUploadRoute: admin_sonata_media_media_upload
            filebrowserImageUploadRouteParameters:
                provider: sonata.media.provider.image
                context: default # Optional, to upload in a custom context
        front_config:
            toolbar: standard


knp_paginator:
    page_range: 5
    default_options:
        page_name: page
        sort_field_name: sort
        sort_direction_name: direction
        distinct: true
    template:
#        pagination: 'KnpPaginatorBundle:Pagination:sliding.html.twig'
        pagination: InfoMainBundle:Pagination:twitter_bootstrap_v3_pagination.html.twig
        sortable: 'KnpPaginatorBundle:Pagination:sortable_link.html.twig'

#lhpalacio_backup_manager:
#    database:
#        development:
#            type: mysql
#            host: "%database_host%"
#            port: "%database_port%"
#            user: "%database_user%"
#            pass: "%database_password%"
#            database: "%database_name%"
#        production:
#            type: mysql
#            host: localhost
#            port: 3306
#            user: root
#            pass:
#            database: test
#    storage:
#        local:
#            type: Local
#            root: ../db/
#        s3:
#            type: AwsS3
#            key:
#            secret:
#            region: us-east-1
#            version: latest
#            bucket:
#            root:
#        rackspace:
#            type: Rackspace
#            username:
#            password:
#            container:
#        dropbox:
#            type: Dropbox
#            token:
#            key:
#            secret:
#            app:
#            root:
#        ftp:
#            type: Ftp
#            host:
#            username:
#            password:
#            root:
#            port: 21
#            passive: true
#            ssl: true
#            timeout: 30
#        sftp:
#            type: Sftp
#            host:
#            username:
#            password:
#            root:
#            port: 21
#            timeout: 10
#            privateKey:

liip_imagine:
    resolvers:
        default:
            web_path: ~

    filter_sets:
        cache: ~

        # the name of the "filter set"
        my_thumb:

            # adjust the image quality to 75%
            quality: 75

            # list of transformations to apply (the "filters")
            filters:

                # create a thumbnail: set size to 120x90 and use the "outbound" mode
                # to crop the image when the size ratio of the input differs
                thumbnail: { size: [120, 90], mode: outbound }

                # create a 2px black border: center the thumbnail on a black background
                # 4px larger to create a 2px border around the final image
                background: { size: [124, 94], position: center, color: '#000000' }


nelmio_cors:
    paths:
        '^/':
            allow_credentials: true
            allow_origin: ['*']
            allow_headers: ['X-Custom-Auth', 'Content-Type','Authorization','Origin', 'X-Requested-With', 'Content-Type', 'Accept']
            allow_methods: ['POST', 'PUT', 'GET', 'DELETE','OPTIONS']
            max_age: 3600

nelmio_api_doc: ~
